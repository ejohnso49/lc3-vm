config default = "build"

# Path to gcc
let cc = which "gcc"

# Path to g++
let cxx = which "g++"

# Path to linker
let ld = cc

let program-name = "lc3{EXE_SUFFIX}"

# Build profile (debug or release)
let profile = "debug"

# Pick cflags based on the build profile
let cflags = profile | match {
    "debug" => ["-O0", "-g"]
    "release" => ["-O3"]
    "test" => ["-O0", "-g", "-DCONFIG_TEST"]
    "%" => ""
}

# Build rule for vm source
build "src/%.o" {
    from "src/{%}.c"
    depfile "{in}.d"

    let include-path = "src"
    let flags = [cflags, "-I<include-path>"]

    # Generate depfile and object file in the same command
    run "{cc} -MMD -MT <in> -MF <depfile> -c {flags*} -o <out> <in>"
}

build "test/%.o" {
    from "test/{%}.cpp"
    depfile "{in}.d"

    let include-path = ["src", "test", "cpputest/include"] | map "-I{}"
    let flags = [cflags, include-path]

    run "{cxx} -MMD -MT <in> -MF <depfile> -c {flags*} -o <out> <in>"
}

# Build rule for the main executable
build "{program-name}" {
    # Include all .c files in the build
    from glob "src/**/*.c" | map "{:.c=.o}"

    run "{ld} -o <out> <in*>"
}

build "lib/libCppUTest%.a" {
    let script = "scripts/build_cpputest.sh"
    run {
        shell "zsh {script}"
    }
}

build "{program-name}-test" {
    let vm-src = glob "src/**/*.c" | discard "%main.c" | map "{:.c=.o}"
    let test-src = glob "test/src/**/*.cpp" | map "{:.cpp=.o}"
    let lib-dir = "lib"

    let ldflags = ["-L<lib-dir>", "-lCppUTest", "-lCppUTestExt"]

    from [vm-src, test-src, "lib/libCppUTest.a", "lib/libCppUTestExt.a"]
    run "{cxx} {ldflags*} -o <out> <in*>"
}

task get_deps {
    let script = "scripts/get_deps.sh"
    run {
        shell "zsh {script}"
    }
}

task build {
    build "{program-name}"
    info "Build complete!"
}

task run {
    let executable = "{program-name}"
    build executable
    run "<executable>"
}

task test {
    let executable = "{program-name}-test"
    build executable
    run "<executable>"
}

task clean {
    run "rm -rf target"
}